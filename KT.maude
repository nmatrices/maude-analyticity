--- Logic : KT

load ./base .
load ./analiticity .

--- Sets for KT and dependencies 
fmod KT-SPEC is
    pr STATE .

    --- ---------------
    var V  : BValue .
    --- ---------------

    --- Sets 
    ops ALL D ND N I P PN : -> SetBValue .
    eq D = T, t .
    eq ND = F, f .
    eq N = T .
    eq I = F .
    eq P = T, t, f .
    eq PN = F, f, t .
    eq ALL = T, t, F, f .

    --- Dependencies 
    op arrow : Value   -> SetBValue .
    eq arrow(t) = F, f .
    eq arrow(f) = T, t .
    eq arrow(V) = empty [owise] .


    op arrow2 : Value   -> SetBValue .
    eq arrow2(V) = empty .

    --- Support (values in the relCondition)
    op support : Value -> SetBValue .
    eq support(T) = T, t .
    eq support(F) = F, f .
    eq support(V) = ALL [owise] .

endfm


view KT from TH-LOGIC to KT-SPEC is endv

--- Procedures for checking whether the matrix is OK
mod KT-CHECK is
    pr CHECK-REL{ KT } .

    --- --------------------
    vars V VNEW VNEW'  : BValue .
    vars VA VB VC : BValue .
    var N         : Nat .
    vars ROWS ROWS' : Matrix .
    vars ASSG ASSG' : SetAssignment .
    vars ID ID' : Id .
    --- --------------------

    --- Checking if the matrix satisfies the conditions 
    op check : Matrix -> Bool .
    op checkRel : Row Matrix -> Bool .
    op checkArrow : Matrix Matrix -> Bool .

    eq check ( ([ ASSG ] : 1 , ROWS)) = checkRel( [ ASSG ] : 1, ROWS) and-then 
                                     checkArrow(( [ ASSG ] : 1      ), ([ ASSG ] : 1, ROWS)) .

    --- No more rows to be checked 
    eq checkRel ( [ ASSG ] : 1, empty) = true .
    --- A row generated from 1 must be checked 
    eq checkRel (  [ NEW : VNEW , ASSG  ] : 1,
                  ([ NEW : VNEW', ASSG' ] : N <- 1, ROWS)) = check-rel(VNEW, VNEW') and-then
       checkRel( [ NEW : VNEW, ASSG ] : 1, ROWS) .

endm

--- In KT, there are two cases for BOX.
--- In the first case, 
---     there is no T successor A or
---     there are only T successor
--- In this case, extend with upper cases.
mod KT-CASE-BOX1 is
    pr KT-CHECK .

    --- --------------------
    vars V V' : BValue .
    vars VA VB VC : BValue .
    var ROWS  : Matrix .
    var ROW   : Row . 
    vars ASSG ASSG' : SetAssignment .
    vars ID ID' : Id .
    var SV  : SetBValue .
    var N : Nat . 
    --- --------------------

    --- Extending box 
    op box : BValue        -> BValue .
    op box' : BValue        -> SetBValue .

    --- Extending the matrix 
    eq box(T) = T .
    eq box(V) = F [owise] .

    eq box'(T) = T, t .
    eq box'(f) = F, f . 
    eq box'(t) = F, f . 
    eq box'(F) = F . 

    op valid-case? : Matrix -> Bool .
    ceq valid-case?( ([ A : T, ASSG  ] : ID, 
                      [ A : V, ASSG' ] : ID', ROWS)) = false 
    if V =/= T .

    eq valid-case?(ROWS) = true [owise] .

    eq checkArrow(ROW, ROWS) = true .

endm 

view KT-Case-Box1 from TH-BOX to KT-CASE-BOX1 is endv

mod CHECK-ANALITICITY-BOX1 is
    pr ANALITICITY-BOX{KT, KT-Case-Box1} .
endm


--- In the second case, there is T in column A.
--- In this case, extend with lower cases, whenever possible.
mod KT-CASE-BOX2 is
    pr KT-CHECK .

    --- --------------------
    vars V V' : BValue .
    vars VA VB VC : BValue .
    vars VNEW VNEW' : BValue .
    vars ROWS ROWS'  : Matrix .
    vars ASSG ASSG' : SetAssignment .
    vars ID ID' : Id .
    var SV  : SetBValue .
    var N : Nat . 
    --- --------------------

    --- Extending box 
    op box :  BValue        -> BValue .
    op box' : BValue        -> SetBValue .

    --- Extending the matrix
    eq box(T) = t .
    eq box(f) = f . 
    eq box(t) = f . 
    eq box(F) = F . 

    eq box'(T) = T, t .
    eq box'(f) = F, f . 
    eq box'(t) = F, f . 
    eq box'(F) = F . 

    op valid-case? : Matrix -> Bool .
    ceq valid-case?( ([ A : T, ASSG  ] : ID, 
                      [ A : V, ASSG' ] : ID', ROWS)) = true 
    if V =/= T .

    eq valid-case?(ROWS) = false [owise] .

   eq checkArrow(empty, ROWS) = true .
   eq checkArrow( ([ NEW : VNEW,  ASSG ] : 1 , ROWS ), ROWS') =
                 arrow(VNEW) == empty or-else checkFstRow(VNEW, ROWS') .

   --- Check if the row ID=1 is supported 
   op checkFstRow : BValue Matrix -> Bool .
   eq checkFstRow(VNEW, ([ NEW : VNEW', ASSG'] : N <- 1, ROWS')) = 
                  check-arrow(VNEW, VNEW') or-else 
                  checkFstRow(VNEW, ROWS') .
   eq checkFstRow(VNEW, ROWS) = false [owise] .


endm 

view KT-Case-Box2 from TH-BOX to KT-CASE-BOX2 is endv

mod CHECK-ANALITICITY-BOX2 is
    pr ANALITICITY-BOX{KT, KT-Case-Box2} .
endm


--- Case IMP1: there is no t -> f in the matrix 
mod KT-CASE-IMP1 is
    pr KT-CHECK .

    --- --------------------
    vars V V' : BValue .
    vars VNEW VNEW' : BValue .
    vars ROWS ROWS'  : Matrix .
    vars ASSG ASSG' : SetAssignment .
    var ID : Id .
    var N : Nat .
    --- --------------------

    --- Extending implication 
    op imp : BValue  BValue -> BValue .
    op imp' : BValue  BValue -> SetBValue .

    op imp : BValue BValue -> BValue .
    eq imp(F, V) = T .
    eq imp(V, T) = T .
    eq imp(T, t) = t .
    eq imp(T, f) = f .
    eq imp(T, F) = F .
    eq imp(t, F) = f .
    eq imp(f, F) = t .
    eq imp(t, f) = f .
    eq imp(V, V') = T [owise] .

    eq imp'(F, V) = T .
    eq imp'(V, T) = T .
    eq imp'(T, t) = t .
    eq imp'(T, f) = f .
    eq imp'(T, F) = F .
    eq imp'(t, F) = f .
    eq imp'(f, F) = t .
    eq imp'(t, f) = f .
    eq imp'(V, V') = t, T [owise] .

   --- If there is a valuation A = T, t and B = F, f, the case is not valid 
   --- There are two "hidden cases", which are A = f and B = F, and A = T and B = t .
    op valid-case? : Matrix -> Bool .
    eq valid-case?(([ A : t, B : f, ASSG] : ID, ROWS)) = false .
    eq valid-case?(([ A : t, B : F, ASSG] : ID, ROWS)) = false .
    eq valid-case?(([ A : T, B : f, ASSG] : ID, ROWS)) = false .
    eq valid-case?(([ A : T, B : F, ASSG] : ID, ROWS)) = false .
    --- eq valid-case?(([ A : f, B : F, ASSG] : ID, ROWS)) = false .
    --- eq valid-case?(([ A : T, B : t, ASSG] : ID, ROWS)) = false .
    eq valid-case?(ROWS) = true [owise] .

   eq checkArrow(empty, ROWS) = true .
   eq checkArrow( ([ NEW : VNEW,  ASSG ] : 1 , ROWS ), ROWS') =
                 arrow(VNEW) == empty or-else checkFstRow(VNEW, ROWS') .

   --- Check if the row ID=1 is supported 
   op checkFstRow : BValue Matrix -> Bool .
   eq checkFstRow(VNEW, ([ NEW : VNEW', ASSG'] : N <- 1, ROWS')) = 
                  check-arrow(VNEW, VNEW') or-else 
                  checkFstRow(VNEW, ROWS') .
   eq checkFstRow(VNEW, ROWS) = false [owise] .

endm 

view KT-Case-Imp1 from TH-IMP to KT-CASE-IMP1 is endv

mod CHECK-ANALITICITY-IMP1 is
    pr ANALITICITY-IMP{KT, KT-Case-Imp1} .
endm


--- Case IMP2: there is a successor state of the form D -> ND
mod KT-CASE-IMP2 is
    pr KT-CHECK .

    --- --------------------
    vars V V' : BValue .
    vars VNEW VNEW' : BValue .
    vars VA VB VC : BValue .
    vars ROWS ROWS'  : Matrix .
    vars ASSG ASSG' : SetAssignment .
    var ID : Id .
    var SV  : SetBValue . 
    var N : Nat .
    --- --------------------

    --- Extending implication 
    op imp : BValue  BValue -> BValue .
    op imp' : BValue  BValue -> SetBValue .

    op imp : BValue BValue -> BValue .
    eq imp(F, V) = T .
    eq imp(V, T) = T .
    eq imp(T, t) = t .
    eq imp(T, f) = f .
    eq imp(T, F) = F .
    eq imp(t, F) = f .
    eq imp(f, F) = t .

    --- case 2: there is  T -> F  and then, the lower case are chosen 
    eq imp(t, t) = t .
    eq imp(f, f) = t .
    eq imp(f, t) = t .
    eq imp(t, f) = f . 


    eq imp'(F, V) = T .
    eq imp'(V, T) = T .
    eq imp'(T, t) = t .
    eq imp'(T, f) = f .
    eq imp'(T, F) = F .
    eq imp'(t, F) = f .
    eq imp'(f, F) = t .
    eq imp'(t, f) = f .
    eq imp'(V, V') = t, T [owise] .

    --- Only cases including T -> F are valid. 
    op valid-case? : Matrix -> Bool .
    eq valid-case?(([ A : t, B : f, ASSG] : ID, ROWS)) = true .
    eq valid-case?(([ A : t, B : F, ASSG] : ID, ROWS)) = true .
    eq valid-case?(([ A : T, B : f, ASSG] : ID, ROWS)) = true .
    eq valid-case?(([ A : T, B : F, ASSG] : ID, ROWS)) = true .
    eq valid-case?(([ A : f, B : F, ASSG] : ID, ROWS)) = true .
    eq valid-case?(([ A : T, B : t, ASSG] : ID, ROWS)) = true .
    eq valid-case?(ROWS) = false [owise] .

    --- Since the row 1 needs to be related to a D -> ND row, every t value
    --- is already supported by this extra link (where the value of the implication
    --- is necessarily f or F)
   eq checkArrow(empty, ROWS) = true .
   eq checkArrow( ([ NEW : VNEW,  ASSG ] : 1 , ROWS ), ROWS') =
                 VNEW == t or-else 
                 arrow(VNEW) == empty or-else checkFstRow(VNEW, ROWS') .

   --- Check if the row ID=1 is supported 
   op checkFstRow : BValue Matrix -> Bool .
   eq checkFstRow(VNEW, ([ NEW : VNEW', ASSG'] : N <- 1, ROWS')) = 
                  check-arrow(VNEW, VNEW') or-else 
                  checkFstRow(VNEW, ROWS') .
   eq checkFstRow(VNEW, ROWS) = false [owise] .

endm 


view KT-Case-Imp2 from TH-IMP to KT-CASE-IMP2 is endv

mod CHECK-ANALITICITY-IMP2 is
    pr ANALITICITY-IMP{KT, KT-Case-Imp2} .
endm

eof

--- Commands 

---- BOX CASE OK
dsrew in CHECK-ANALITICITY-BOX1  : initBox using guess ! ; depC ; depA ; guess ! ; value ! ; guess ! ; ignore ; (match no-case ? fail : idle) ; one(simplify) ! ; check .
dsrew in CHECK-ANALITICITY-BOX2  : initBox using guess ! ; depC ; depA ; guess ! ; value ! ; guess ! ; ignore ; (match no-case ? fail : idle) ; one(simplify) ! ; check .

--- Solution 78330
--- rewrites: 36107034 in 55722ms cpu (55977ms real) (647978 rewrites/second)
dsrew in CHECK-ANALITICITY-IMP1  : initImp using guess ! ; depC ; depA ; depB ; guess ! ; value ! ; guess ! ; ignore ; (match no-case ? fail : idle) ; one(simplify) ! ; check .

--- Solution 240550
--- rewrites: 42131395 in 66155ms cpu (66535ms real) (636855 rewrites/second)
dsrew in CHECK-ANALITICITY-IMP2  : initImp using guess ! ; depC ; depA ; depB ; guess ! ; value ! ; guess ! ; ignore ; (match no-case ? fail : idle) ; one(simplify) ! ; check .
