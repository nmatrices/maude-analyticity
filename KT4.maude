--- Logic : KT4

load ./base .
load ./analiticity .

--- Sets for KT4 and dependencies 
fmod KT4-SPEC is
    pr STATE .

    --- ---------------
    var V  : BValue .
    --- ---------------

    --- Sets 
    ops ALL D ND N I P PN : -> SetBValue .
    eq D = T, t .
    eq ND = F, f .
    eq N = T .
    eq I = F .
    eq P = T, t, f .
    eq PN = F, f, t .
    eq ALL = T, t, F, f .

    --- Dependencies 
    op arrow : Value   -> SetBValue .
    eq arrow(t) = F, f .
    eq arrow(f) = T, t .
    eq arrow(V) = empty [owise] .

    op arrow2 : Value   -> SetBValue .
    eq arrow2(V) = empty .

    --- Support (values in the relCondition)
    op support : Value -> SetBValue .
    eq support(T) = T .
    eq support(F) = F .
    eq support(V) = ALL [owise] .

endfm


view KT4 from TH-LOGIC to KT4-SPEC is endv

--- Procedures for checking whether the matrix is OK
mod KT4-CHECK is
    pr CHECK-REL{ KT4 } .

    --- --------------------
    vars V VNEW VNEW'  : BValue .
    vars VA VB VC : BValue .
    var N         : Nat .
    vars ROWS ROWS' : Matrix .
    vars ASSG ASSG' : SetAssignment .
    vars ID ID' : Id .
    --- --------------------

    --- Checking if the matrix satisfies the conditions 
    op check : Matrix -> Bool .
    op checkRel : Row Matrix -> Bool .
    op checkArrow : Row Matrix -> Bool .

    --- The arrows are only checked for the 1st line (since the other lines may take values according
    --- to conditions 
    --- The procedure checkArrow must be implemented by each case
    eq check ( ([ ASSG ] : 1 , ROWS)) = checkRel( [ ASSG ] : 1, ROWS) and-then 
                                     checkArrow(( [ ASSG ] : 1) , ([ ASSG ] : 1, ROWS)) .

    --- No more rows to be checked 
    eq checkRel ( [ ASSG ] : 1, empty) = true .
    --- A row generated from 1 must be checked 
    eq checkRel (  [ NEW : VNEW , ASSG  ] : 1,
                  ([ NEW : VNEW', ASSG' ] : N <- 1, ROWS)) = check-rel(VNEW, VNEW') and-then
       checkRel( [ NEW : VNEW, ASSG ] : 1, ROWS) .


endm

--- In KT4, there are two cases for BOX.
--- In the first case, row 1 does not have a successor where A takes the value T. 
--- In this case, extend with upper cases.
mod KT4-CASE-BOX1 is
    pr KT4-CHECK .

    --- --------------------
    vars V V' : BValue .
    vars VA VB VC : BValue .
    var ROWS  : Matrix .
    var ROW  : Row .
    var ASSG : SetAssignment .
    var ID : Id .
    var SV  : SetBValue .
    var N : Nat . 
    --- --------------------

    --- Extending box 
    op box : BValue        -> BValue .
    op box' : BValue       -> SetBValue .

    --- Extending the matrix 
    eq box(T) = T .
    eq box(t) = F . 
    eq box(f) = F .
    eq box(F) = F . 

    --- The other rows cannot take the f value since this will imply
    --- that those rows have a T-Successor and, by transitivity, 
    --- row 1 will have also a T-Successor (a contradiction). 
    eq box'(V) = box(V) .

    --- valid cases cannot include T
   op valid-case? : Matrix -> Bool .
   eq valid-case?( ([ A : T, ASSG ] : ID, ROWS)) = false .   
   eq valid-case?(ROWS) = true [owise] .

   --- Since the image of the function is T,F, the new value in row 1 does not need to be checked 
   --- for arrow conditions
   eq checkArrow(ROW, ROWS) = true . 

endm 

view KT4-Case-Box1 from TH-BOX to KT4-CASE-BOX1 is endv

mod CHECK-ANALITICITY-BOX1 is
    pr ANALITICITY-BOX{KT4, KT4-Case-Box1} .
endm

--- In the second case, there is a successor state where A takes the value T
--- In this case, extend with lower cases, whenever possible.
mod KT4-CASE-BOX2 is
    pr KT4-CHECK .

    --- --------------------
    vars V V' : BValue .
    vars VA VB VC : BValue .
    var ROWS  : Matrix .
    var ROW   : Row . 
    var ASSG : SetAssignment .
    var ID : Id .
    var SV  : SetBValue .
    var N : Nat . 
    --- --------------------

    --- Extending box 
    op box : BValue        -> BValue .
    op box' : BValue        -> SetBValue .

    --- Extending the matrix
    eq box(T) = T .
    eq box(f) = f . 
    eq box(t) = f . 
    eq box(F) = F . 

    eq box'(T) = T .
    eq box'(f) = f, F . 
    eq box'(t) = f, F . 
    eq box'(F) = F . 


    --- All are valid since the checkArrow function is assuming implicitely the
    --- existance of the T-successor. 
    op valid-case? : Matrix -> Bool .
    eq valid-case?(ROWS) = true .

   --- The values T,F do not need any support. If a value f is assigned, 
   --- we know that there is a successor state where A takes the value T and 
   --- then, every f is supported by a T
   eq checkArrow(ROW, ROWS) = true . 

endm 

view KT4-Case-Box2 from TH-BOX to KT4-CASE-BOX2 is endv

mod CHECK-ANALITICITY-BOX2 is
    pr ANALITICITY-BOX{KT4, KT4-Case-Box2} .
endm

--- Case IMP1: there is no t -> f in the matrix 
mod KT4-CASE-IMP1 is
    pr KT4-CHECK .

    --- --------------------
    vars V V' : BValue .
    vars VNEW VNEW' : BValue .
    vars ROWS ROWS'  : Matrix .
    vars ASSG ASSG' : SetAssignment .
    var ID : Id .
    var N : Nat .
    --- --------------------

    --- Extending implication 
    op imp : BValue  BValue -> BValue .
    op imp' : BValue  BValue -> SetBValue .

    op imp : BValue BValue -> BValue .
    eq imp(F, V) = T .
    eq imp(V, T) = T .
    eq imp(T, t) = t .
    eq imp(T, f) = f .
    eq imp(T, F) = F .
    eq imp(t, F) = f .
    eq imp(f, F) = t .
    eq imp(t, f) = f .
    eq imp(V, V') = T [owise] .

    --- Since the second tow cannot have a t-f successor (otherwise, row 1 also have a t->f successor), 
    --- imp' = imp
    eq imp'(V, V') = imp(V, V') .

   --- If there is a valuation A = T, t and B = F, f, the case is not valid 
   --- There are two "hidden cases", which are A = f and B = F, and A = T and B = t .
    op valid-case? : Matrix -> Bool .
    eq valid-case?(([ A : t, B : f, ASSG] : ID, ROWS)) = false .
    eq valid-case?(([ A : t, B : F, ASSG] : ID, ROWS)) = false .
    eq valid-case?(([ A : T, B : f, ASSG] : ID, ROWS)) = false .
    eq valid-case?(([ A : T, B : F, ASSG] : ID, ROWS)) = false .
    eq valid-case?(([ A : f, B : F, ASSG] : ID, ROWS)) = false .
    eq valid-case?(([ A : T, B : t, ASSG] : ID, ROWS)) = false .
    eq valid-case?(ROWS) = true [owise] .

   eq checkArrow(empty, ROWS) = true .
   eq checkArrow( ([ NEW : VNEW,  ASSG ] : 1 , ROWS ), ROWS') =
                 arrow(VNEW) == empty or-else checkFstRow(VNEW, ROWS') .

   --- Check if the row ID=1 is supported 
   op checkFstRow : BValue Matrix -> Bool .
   eq checkFstRow(VNEW, ([ NEW : VNEW', ASSG'] : N <- 1, ROWS')) = 
                  check-arrow(VNEW, VNEW') or-else 
                  checkFstRow(VNEW, ROWS') .
   eq checkFstRow(VNEW, ROWS) = false [owise] .

endm 

view KT4-Case-Imp1 from TH-IMP to KT4-CASE-IMP1 is endv

mod CHECK-ANALITICITY-IMP1 is
    pr ANALITICITY-IMP{KT4, KT4-Case-Imp1} .
endm


--- Case IMP2: there is a row D -> ND in the matrix 
mod KT4-CASE-IMP2 is
    pr KT4-CHECK .

    --- --------------------
    vars V V' : BValue .
    vars VA VB VC : BValue .
    vars VNEW VNEW' : BValue .
    vars ROWS ROWS'  : Matrix .
    vars ASSG ASSG' : SetAssignment .
    var ID : Id .
    var SV  : SetBValue . 
    var N : Nat .
    --- --------------------

    --- Extending implication 
    op imp : BValue  BValue -> BValue .
    op imp' : BValue  BValue -> SetBValue .

    op imp : BValue BValue -> BValue .
    eq imp(F, V) = T .
    eq imp(V, T) = T .
    eq imp(T, t) = t .
    eq imp(T, f) = f .
    eq imp(T, F) = F .
    eq imp(t, F) = f .
    eq imp(f, F) = t .

    --- case 2: there is  t -> f  and then, the lower case are chosen 
    eq imp(t, t) = t .
    eq imp(f, f) = t .
    eq imp(f, t) = t .
    eq imp(t, f) = f . 


    eq imp'(F, V) = T .
    eq imp'(V, T) = T .
    eq imp'(T, t) = t .
    eq imp'(T, f) = f .
    eq imp'(T, F) = F .
    eq imp'(t, F) = f .
    eq imp'(f, F) = t .
    eq imp'(t, f) = f .
    eq imp'(V, V') = t, T [owise] .

    --- All the cases are valid and the t->f conditions is "added" in the verification of the arrow 
   op valid-case? : Matrix -> Bool .
   --- eq valid-case?( ([ A : f, B : f, ASSG ] : 1, ROWS)) = true .
   --- eq valid-case?( ([ A : f, B : t, ASSG ] : 1, ROWS)) = true .
   --- eq valid-case?( ([ A : t, B : t, ASSG ] : 1, ROWS)) = true .
   --- eq valid-case?(ROWS) = false [owise] .
   eq valid-case?(ROWS) = true .

    --- if it is a "t", then it is automatically supported by the hypothesis 
   eq checkArrow(empty, ROWS) = true .
   eq checkArrow( ([ NEW : VNEW,  ASSG ] : 1 , ROWS ), ROWS') =
                 VNEW == t or-else 
                 arrow(VNEW) == empty or-else checkFstRow(VNEW, ROWS') .

   --- Check if the row ID=1 is supported 
   op checkFstRow : BValue Matrix -> Bool .
   eq checkFstRow(VNEW, ([ NEW : VNEW', ASSG'] : N <- 1, ROWS')) = 
                  check-arrow(VNEW, VNEW') or-else 
                  checkFstRow(VNEW, ROWS') .
   eq checkFstRow(VNEW, ROWS) = false [owise] .


endm 


view KT4-Case-Imp2 from TH-IMP to KT4-CASE-IMP2 is endv

mod CHECK-ANALITICITY-IMP2 is
    pr ANALITICITY-IMP{KT4, KT4-Case-Imp2} .
endm

eof

--- Commands 

---- BOX CASE OK
dsrew in CHECK-ANALITICITY-BOX1   : initBox using guess ! ; depC ; depA ; guess ! ; value ! ; guess ! ; ignore ; (match no-case ? fail : idle) ; one(simplify) ! ; check .

--- Check Box
dsrew in CHECK-ANALITICITY-BOX2   : initBox using guess ! ; depC ; depA ; guess ! ; value ! ; guess ! ; ignore ; (match no-case ? fail : idle) ; one(simplify) ! ; check .


--- Checking failures 
dsrew in CHECK-ANALITICITY-BOX1   : initBox using guess ! ; depC ; depA ; guess ! ; value ! ; guess ! ; ignore ; (match no-case ? fail : idle) ; one(simplify) ! ; check ; match(FS:FState) .
dsrew in CHECK-ANALITICITY-BOX2   : initBox using guess ! ; depC ; depA ; guess ! ; value ! ; guess ! ; ignore ; (match no-case ? fail : idle) ; one(simplify) ! ; check ; match(FS:FState) .

-------------------------------------------

--- Implication 1
--- Solution 21800
dsrew in CHECK-ANALITICITY-IMP1   : initImp using guess ! ; depC ; depA ; depB ; guess ! ; value ! ; guess ! ; ignore ; (match no-case ? fail : idle) ; one(simplify) ! ; check .

--- Solution 283586
--- rewrites: 42975927 in 449210ms cpu (450146ms real) (95669 rewrites/second)

dsrew in CHECK-ANALITICITY-IMP2   : initImp using guess ! ; depC ; depA ; depB ; guess ! ; value ! ; guess ! ; ignore ; (match no-case ? fail : idle) ; one(simplify) ! ; check .
dsrew in CHECK-ANALITICITY-IMP2   : initImp using guess ! ; depC ; depA ; depB ; guess ! ; value ! ; guess ! ; ignore ; (match no-case ? fail : idle) ; one(simplify) ! ; check ; match (FS:FState) .
