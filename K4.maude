--- Logic K4
load ./base .
load ./analiticity .

--- Sets for K4 and dependencies 
fmod K4-SPEC is
    pr STATE .

    --- ---------------
    var V  : BValue .
    --- ---------------

    --- Sets 
    ops ALL D ND N I P PN : -> SetBValue .
    eq D = T, t, t1, t2 .
    eq ND = F, f, f1, f2 .
    eq N = T, t1, f2 ,f1 .
    eq I = F, f1, t2, t1 .
    eq P = T, t, f, f2 .
    eq PN = F, f, t, t2 .
    eq ALL = T, t, F, f, t2, f2, t1, f1 .

    --- Dependencies 
    op arrow : Value   -> SetBValue .
    eq arrow(T) = T, t1 .
    eq arrow(t) = T, t, t1, t2 .
    eq arrow(t2) = F, f1 .
    eq arrow(f2) = T, t1 .
    eq arrow(f) = T,t, t1, t2 .
    eq arrow(F) = F, f1 .
    eq arrow(V) = empty [owise] .

    op arrow2 : Value   -> SetBValue .
    op arrow2 : Value   -> SetBValue .
    eq arrow2(t) = F, f, f1, f2 .
    eq arrow2(f) = F, f, f1, f2 .
    eq arrow2(V) = empty [owise] .

    --- Support (values in the relCondition)
    op support : Value -> SetBValue .
    eq support(T) = T, t1 .
    eq support(t) = ALL .
    eq support(t1) = empty .
    eq support(t2) = F, f1 .
    eq support(f2) = T, t1 .
    eq support(f1) = empty .
    eq support(f) = ALL .
    eq support(F) = F, f1 .
endfm

view K4 from TH-LOGIC to K4-SPEC is endv

--- Procedures for checking whether the matrix is OK
mod K4-CHECK is
    pr CHECK-REL{ K4 } .

    --- --------------------
    vars V VNEW VNEW'  : BValue .
    var N         : Nat .
    var SV        : SetBValue . 
    vars ROWS ROWS' : Matrix .
    vars ASSG ASSG' : SetAssignment .
    vars ID ID' : Id .
    --- --------------------
    --- Checking if the matrix satisfies the conditions 
    op check : Matrix -> Bool .
    op checkRel : Row Matrix -> Bool .
    op checkArrow : Matrix Matrix -> Bool .

    eq check ( ([ ASSG ] : 1 , ROWS)) = checkRel( [ ASSG ] : 1, ROWS) and-then 
                                     checkArrow(( [ ASSG ] : 1      ), ([ ASSG ] : 1, ROWS)) .

    --- No more rows to be checked 
    eq checkRel ( [ ASSG ] : 1, empty) = true .
    --- A row generated from 1 must be checked 
    eq checkRel (  [ NEW : VNEW , ASSG  ] : 1,
                  ([ NEW : VNEW', ASSG' ] : N <- 1, ROWS)) = check-rel(VNEW, VNEW') and-then
       checkRel( [ NEW : VNEW, ASSG ] : 1, ROWS) .
endm

mod K4-CASE-BOX is
    pr K4-CHECK .

    --- --------------------
    vars V V' V'' : BValue .
    vars VA VC VNEW : BValue . 
    var ROWS  : Matrix .
    var ROW   : Row .
    vars ASSG ASSG' ASSG'' : SetAssignment .
    vars ID ID' ID'' : Id .
    --- --------------------

    --- Extending box 
    op box : BValue        -> BValue .
    op box1 : BValue        -> BValue .
    op box2 : BValue        -> BValue .
    op box3 : BValue        -> BValue .
    op box' : BValue        -> SetBValue .

    --- Extending the matrix
    --- box if not defined here since it is not used by rulu value (overwritten here as value')

    --- Case (3) in the PDF
    eq box1(T) = T .
    eq box1(t) = f .
    eq box1(t2) = f .
    eq box1(f2) = T .
    eq box1(f) = f .
    eq box1(F) = f .
    eq box1(t1) = t1 .
    eq box1(f1) = t1 .

    --- case (1) in the PDF 
    eq box2(T) = T .
    eq box2(t) = f2 .
    eq box2(t2) = f2 .
    eq box2(f2) = T .
    eq box2(f) = f2 .
    eq box2(F) = f2 .
    eq box2(t1) = t1 .
    eq box2(f1) = t1 .

    --- case (2) in the PDF 
    eq box3(T) = T .
    eq box3(t) = F .
    eq box3(t2) = F .
    eq box3(f2) = T .
    eq box3(f) = F .
    eq box3(F) = F .
    eq box3(t1) = t1 .
    eq box3(f1) = t1 .

    eq box'(T) = T .
    eq box'(t) = F, f, f2 .
    eq box'(t2) = F, f, f2 .
    eq box'(f2) = T .
    eq box'(f) = F, f, f2 .
    eq box'(F) = F, f, f2 .
    eq box'(t1) = t1 .
    eq box'(f1) = t1 .


    op valid-case? : Matrix -> Bool .
    ceq valid-case?( (ROWS, [A : VA, C : VC, NEW : V]: ID)) = false 
        if (VA in (t1, f1) and-then (not VC in (t1, f1))) or-else
           (VC in (t1, f1) and-then (not VA in (t1, f1))) .
    eq valid-case?(ROWS) = true [owise] .

    --- Checking arrow for t/f (Two arrows)
    ceq checkArrow([ NEW : V,  ASSG  ] : 1, 
                   (ROWS, 
                    [ NEW : V' ,  ASSG'   ] : ID', 
                    [ NEW : V'',  ASSG''  ] : ID'')) = true
        if V in (t,f) and-then V' in arrow(V) and-then  V'' in arrow2(V) .

    --- The other cases that need only one arrow 
    ceq checkArrow([ NEW : V,  ASSG  ] : 1, 
                   (ROWS, 
                    [ NEW : V' ,  ASSG'   ] : ID')) = true
        if not(V in (t,f)) and-then ( V in (t1,f1) or-else  V' in arrow(V) ) .


    eq checkArrow(ROW, ROWS) = false [owise] .


    op two-values : Matrix -> Bool .
    ceq two-values(  ([ A : V,  ASSG  ] : ID, 
                      [ A : V', ASSG' ] : ID', ROWS)) = true 
         if V in N and-then not V' in N .
    eq two-values(ROWS) = false [owise] .

    op all-t-f2 : Matrix -> Bool .
    ceq all-t-f2(  ([ A : V,  ASSG  ] : ID, ROWS)) = false
            if not ( V in N) .
    eq all-t-f2(ROWS) = true [owise] .


    --- Customized rules for assigning values in all the cases
    --- Analyzing the cases, note that taking the decision box2
    --- implies that the other rows also need to take the same decision (due to 4)
    --- The same happens with box3. More generally, note that a {T,f2} value
    --- necessarily is extended with a {T} value 
    --- In the of box1, in the row {T,f2}, box2 must be used. In the other row, any decision can be 
    --- taken (box'). 
    rl [value'] :  { ROWS, [ ASSG,  A : VA, NEW : ?f ] : 1 }  => 
        if two-values(ROWS) then
            { to-box1(ROWS), [ ASSG,  A : VA, NEW : box1(VA)  ] : 1 }
        else (if all-t-f2(ROWS) then 
                { to-box2(ROWS), [ ASSG,  A : VA, NEW : box2(VA)  ] : 1 }
             else
                { to-box3(ROWS), [ ASSG,  A : VA, NEW : box3(VA)  ] : 1 }
             fi)
       fi .

    --- rl [value'] :  A : VA, NEW : ?f'  => A : VA , NEW : ?[ box'(VA) ] .

    op to-box2 : Matrix -> Matrix .
    eq to-box2(empty) = empty .
    eq to-box2( (  [ASSG, A : VA, NEW : ?f'  ] : ID , ROWS)) = 
                  ([ASSG, A : VA, NEW : box2(VA) ] : ID), 
                  to-box2(ROWS) .
    op to-box3 : Matrix -> Matrix .
    eq to-box3(empty) = empty .
    eq to-box3( (  [ASSG, A : VA, NEW : ?f'  ] : ID , ROWS)) = 
                  ([ASSG, A : VA, NEW : box3(VA) ] : ID), 
                  to-box3(ROWS) .
    op to-box1 : Matrix -> Matrix .
    eq to-box1(empty) = empty .
    eq to-box1( (  [ASSG, A : VA, NEW : ?f'  ] : ID , ROWS)) = 
                    if VA in N then 
                        ([ASSG, A : VA, NEW : box2(VA) ] : ID) 
                    else
                        ([ASSG, A : VA, NEW : ?[ box'(VA) ] ] : ID) 
                    fi, 
                  to-box1(ROWS) .

endm 

view K4-Case-Box from TH-BOX to K4-CASE-BOX is endv

mod CHECK-ANALITICITY-BOX is
    pr ANALITICITY-BOX{K4, K4-Case-Box} .
endm

eof 

dsrew  in CHECK-ANALITICITY-BOX  : initBox using guess ! ; depC ; depA ; guess ! ; value' ! ; guess ! ; ignore ; (match no-case ? fail : idle) ; one(simplify) ! ; check .
dsrew  in CHECK-ANALITICITY-BOX  : initBox using guess ! ; depC ; depA ; guess ! ; value' ! ; guess ! ; ignore ; (match no-case ? fail : idle) ; one(simplify) ! ; check ; match FS:FState .

